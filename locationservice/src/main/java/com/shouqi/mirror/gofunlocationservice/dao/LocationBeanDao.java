package com.shouqi.mirror.gofunlocationservice.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_BEAN".
*/
public class LocationBeanDao extends AbstractDao<LocationBean, Void> {

    public static final String TABLENAME = "LOCATION_BEAN";

    /**
     * Properties of entity LocationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", false, "ORDER_ID");
        public final static Property Longitude = new Property(1, double.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(2, double.class, "Latitude", false, "LATITUDE");
        public final static Property TimeStamp = new Property(3, long.class, "timeStamp", false, "TIME_STAMP");
    }


    public LocationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_BEAN\" (" + //
                "\"ORDER_ID\" TEXT," + // 0: orderId
                "\"LONGITUDE\" REAL NOT NULL ," + // 1: Longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 2: Latitude
                "\"TIME_STAMP\" INTEGER NOT NULL );"); // 3: timeStamp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationBean entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindLong(4, entity.getTimeStamp());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationBean entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
        stmt.bindDouble(2, entity.getLongitude());
        stmt.bindDouble(3, entity.getLatitude());
        stmt.bindLong(4, entity.getTimeStamp());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public LocationBean readEntity(Cursor cursor, int offset) {
        LocationBean entity = new LocationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderId
            cursor.getDouble(offset + 1), // Longitude
            cursor.getDouble(offset + 2), // Latitude
            cursor.getLong(offset + 3) // timeStamp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationBean entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLongitude(cursor.getDouble(offset + 1));
        entity.setLatitude(cursor.getDouble(offset + 2));
        entity.setTimeStamp(cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(LocationBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(LocationBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(LocationBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
