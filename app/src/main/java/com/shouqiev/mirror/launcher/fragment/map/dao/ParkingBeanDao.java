package com.shouqiev.mirror.launcher.fragment.map.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PARKING_BEAN".
*/
public class ParkingBeanDao extends AbstractDao<ParkingBean, String> {

    public static final String TABLENAME = "PARKING_BEAN";

    /**
     * Properties of entity ParkingBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Parkingid = new Property(0, String.class, "parkingid", true, "PARKINGID");
        public final static Property ParkingName = new Property(1, String.class, "ParkingName", false, "PARKING_NAME");
        public final static Property ParkingAddress = new Property(2, String.class, "ParkingAddress", false, "PARKING_ADDRESS");
        public final static Property Longitude = new Property(3, double.class, "Longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(4, double.class, "Latitude", false, "LATITUDE");
        public final static Property Type = new Property(5, int.class, "type", false, "TYPE");
    }


    public ParkingBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ParkingBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PARKING_BEAN\" (" + //
                "\"PARKINGID\" TEXT PRIMARY KEY NOT NULL ," + // 0: parkingid
                "\"PARKING_NAME\" TEXT," + // 1: ParkingName
                "\"PARKING_ADDRESS\" TEXT," + // 2: ParkingAddress
                "\"LONGITUDE\" REAL NOT NULL ," + // 3: Longitude
                "\"LATITUDE\" REAL NOT NULL ," + // 4: Latitude
                "\"TYPE\" INTEGER NOT NULL );"); // 5: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PARKING_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ParkingBean entity) {
        stmt.clearBindings();
 
        String parkingid = entity.getParkingid();
        if (parkingid != null) {
            stmt.bindString(1, parkingid);
        }
 
        String ParkingName = entity.getParkingName();
        if (ParkingName != null) {
            stmt.bindString(2, ParkingName);
        }
 
        String ParkingAddress = entity.getParkingAddress();
        if (ParkingAddress != null) {
            stmt.bindString(3, ParkingAddress);
        }
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindLong(6, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ParkingBean entity) {
        stmt.clearBindings();
 
        String parkingid = entity.getParkingid();
        if (parkingid != null) {
            stmt.bindString(1, parkingid);
        }
 
        String ParkingName = entity.getParkingName();
        if (ParkingName != null) {
            stmt.bindString(2, ParkingName);
        }
 
        String ParkingAddress = entity.getParkingAddress();
        if (ParkingAddress != null) {
            stmt.bindString(3, ParkingAddress);
        }
        stmt.bindDouble(4, entity.getLongitude());
        stmt.bindDouble(5, entity.getLatitude());
        stmt.bindLong(6, entity.getType());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ParkingBean readEntity(Cursor cursor, int offset) {
        ParkingBean entity = new ParkingBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // parkingid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ParkingName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ParkingAddress
            cursor.getDouble(offset + 3), // Longitude
            cursor.getDouble(offset + 4), // Latitude
            cursor.getInt(offset + 5) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ParkingBean entity, int offset) {
        entity.setParkingid(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setParkingName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParkingAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.getDouble(offset + 3));
        entity.setLatitude(cursor.getDouble(offset + 4));
        entity.setType(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ParkingBean entity, long rowId) {
        return entity.getParkingid();
    }
    
    @Override
    public String getKey(ParkingBean entity) {
        if(entity != null) {
            return entity.getParkingid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ParkingBean entity) {
        return entity.getParkingid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
