package com.shouqiev.mirror.launcher.fragment.map.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.shouqiev.mirror.launcher.model.EnvironmentDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ENVIRONMENT_DETAIL".
*/
public class EnvironmentDetailDao extends AbstractDao<EnvironmentDetail, String> {

    public static final String TABLENAME = "ENVIRONMENT_DETAIL";

    /**
     * Properties of entity EnvironmentDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ImgPath = new Property(0, String.class, "imgPath", true, "IMG_PATH");
        public final static Property EnvLevel = new Property(1, float.class, "envLevel", false, "ENV_LEVEL");
        public final static Property ImgTime = new Property(2, String.class, "imgTime", false, "IMG_TIME");
    }


    public EnvironmentDetailDao(DaoConfig config) {
        super(config);
    }
    
    public EnvironmentDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ENVIRONMENT_DETAIL\" (" + //
                "\"IMG_PATH\" TEXT PRIMARY KEY NOT NULL ," + // 0: imgPath
                "\"ENV_LEVEL\" REAL NOT NULL ," + // 1: envLevel
                "\"IMG_TIME\" TEXT);"); // 2: imgTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ENVIRONMENT_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EnvironmentDetail entity) {
        stmt.clearBindings();
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(1, imgPath);
        }
        stmt.bindDouble(2, entity.getEnvLevel());
 
        String imgTime = entity.getImgTime();
        if (imgTime != null) {
            stmt.bindString(3, imgTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EnvironmentDetail entity) {
        stmt.clearBindings();
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(1, imgPath);
        }
        stmt.bindDouble(2, entity.getEnvLevel());
 
        String imgTime = entity.getImgTime();
        if (imgTime != null) {
            stmt.bindString(3, imgTime);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public EnvironmentDetail readEntity(Cursor cursor, int offset) {
        EnvironmentDetail entity = new EnvironmentDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imgPath
            cursor.getFloat(offset + 1), // envLevel
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // imgTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EnvironmentDetail entity, int offset) {
        entity.setImgPath(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setEnvLevel(cursor.getFloat(offset + 1));
        entity.setImgTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(EnvironmentDetail entity, long rowId) {
        return entity.getImgPath();
    }
    
    @Override
    public String getKey(EnvironmentDetail entity) {
        if(entity != null) {
            return entity.getImgPath();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EnvironmentDetail entity) {
        return entity.getImgPath() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
